<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces_Round_#762_div3</title>
      <link href="/2021/12/26/Codeforces-Round-762-div3/"/>
      <url>/2021/12/26/Codeforces-Round-762-div3/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-739-Div-3"><a href="#Codeforces-Round-739-Div-3" class="headerlink" title="Codeforces Round #739 (Div. 3)"></a><a href="https://codeforces.com/contest/1560">Codeforces Round #739 (Div. 3)</a></h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>Polycarp 不喜欢能被3整除并且末尾数字为3的整数，让你求出第k小的满足条件的这样的数<br>$$<br>1&lt;=t&lt;=100,1&lt;=k&lt;=1000<br>$$</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>按题意模拟即可</p><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>||i%<span class="number">10</span>==<span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">k--,ans.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(tt--)&#123;</span><br><span class="line"><span class="keyword">int</span> x;cin&gt;&gt;x;</span><br><span class="line">x--;</span><br><span class="line">cout&lt;&lt;ans[x]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个数字圆圈，圆圈里面有连续的偶数个正整数，但是你不知道圆圈的总数，再给你三个数a，b，c，已知a和b互相对应，求解是否存在一个圆圈，使得c也对应某个数，如果不存在，输出-1即可</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>根据a，b的绝对值，我们可以计算出圆圈数字的总个数，然后判断每个数字是否小于总个数即可</p><h3 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">slv</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="keyword">int</span> d=<span class="built_in">abs</span>(a-b);</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">2</span>*d;</span><br><span class="line"><span class="keyword">if</span>(a&gt;n||b&gt;n||c&gt;n) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=n/<span class="number">2</span>) <span class="keyword">return</span> c+d;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> c-d;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line"><span class="keyword">while</span>(tt--)&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">slv</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p><img src="https://espresso.codeforces.com/aa1eece2e042a16fcbc09f2af100e73049fd8841.png"></p><p>按照上图方式填写矩阵，求出第k个数的横坐标和纵坐标</p><h3 id="算法思路-2"><a href="#算法思路-2" class="headerlink" title="算法思路"></a>算法思路</h3><p>按题意模拟找规律即可</p><h3 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">int</span> sq=<span class="built_in">sqrt</span>(k);</span><br><span class="line"><span class="keyword">if</span>(sq*sq==k)&#123;</span><br><span class="line">cout&lt;&lt;sq&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">sq++;</span><br><span class="line"><span class="keyword">int</span> x=sq*sq-(sq<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> u=sq,v=sq;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=x)&#123;</span><br><span class="line">v-=(k-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">u-=x-k;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;u&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;v&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line"><span class="keyword">while</span>(tt--)&#123;</span><br><span class="line"><span class="built_in">slv</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个字符串，每次操作可以删掉一个数，也可以往最右边加一个数，问你最少多少次可以将这个字符串变成2的幂次?</p><h3 id="算法思路-3"><a href="#算法思路-3" class="headerlink" title="算法思路"></a>算法思路</h3><p>打表模拟即可</p><blockquote><p>2<br>4<br>8<br>16<br>32<br>64<br>128<br>256<br>512<br>1024<br>2048<br>4096<br>8192<br>16384<br>32768<br>65536<br>131072<br>262144<br>524288<br>1048576<br>2097152<br>4194304<br>8388608<br>16777216<br>33554432<br>67108864<br>134217728<br>268435456<br>536870912<br>1073741824<br>2147483648<br>4294967296<br>8589934592<br>17179869184<br>34359738368<br>68719476736<br>137438953472<br>274877906944<br>549755813888<br>1099511627776<br>2199023255552<br>4398046511104<br>8796093022208<br>17592186044416<br>35184372088832<br>70368744177664<br>140737488355328<br>281474976710656<br>562949953421312<br>1125899906842624<br>2251799813685248<br>4503599627370496<br>9007199254740992<br>18014398509481984<br>36028797018963968<br>72057594037927936<br>144115188075855872<br>288230376151711744<br>576460752303423488<br>1152921504606846976<br>2305843009213693952<br>4611686018427387904</p></blockquote><p>所有的2^1~2^63的进制数都枚举到了，根据每个字符串枚举维护最小值即可</p><p>对于两个字符串s，p利用指针移动即可完成匹配，复杂度比较低</p><h3 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;string&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;cin&gt;&gt;x;</span><br><span class="line">string s=<span class="built_in">to_string</span>(x);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p:res)&#123;</span><br><span class="line"><span class="keyword">int</span> n=p.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> m=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n&amp;&amp;j&lt;m)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==s[j])&#123;</span><br><span class="line">i++,j++;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">min</span>(ans,n+m<span class="number">-2</span>*cnt);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">63</span>;i++)&#123;</span><br><span class="line">  res.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(<span class="number">1ll</span>&lt;&lt;i));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line"><span class="keyword">while</span>(tt--)&#123;</span><br><span class="line"><span class="built_in">slv</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>对于一个字符串s，每次操作移除其中的一个字符，然后将此字符串接在原字符串的后面，一直持续进行这样的操作，直到字符串s为空，请问是否存在一种方案，使得产生给定的目标串，并且给出产生顺序，如果不存在的话，输出-1即可</p><h3 id="算法思路-4"><a href="#算法思路-4" class="headerlink" title="算法思路"></a>算法思路</h3><p>注意到字符串中只含有小写字母</p><p>从后往前遍历，第一次出现的字符代表的是被删除字符的逆序，根据逆序并结合各个字母出现的频率可以推断出原始串，根据原始串模拟判断是否有解即可</p><h3 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">set&lt;<span class="keyword">char</span>&gt; se;</span><br><span class="line">string ord;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">cnt[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"><span class="keyword">if</span>(!se.<span class="built_in">count</span>(s[i]))&#123;</span><br><span class="line">ord=s[i]+ord;</span><br><span class="line">se.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m=ord.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ord.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[ord[i]-<span class="string">&#x27;a&#x27;</span>]%(i+<span class="number">1</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">len+=(cnt[ord[i]-<span class="string">&#x27;a&#x27;</span>]/(i+<span class="number">1</span>));</span><br><span class="line">cnt[ord[i]-<span class="string">&#x27;a&#x27;</span>]/=(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">string start=s.<span class="built_in">substr</span>(<span class="number">0</span>,len);</span><br><span class="line"><span class="keyword">int</span> tmp=len;</span><br><span class="line">string p=start;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> c:ord)&#123;</span><br><span class="line">string q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> y:start)&#123;</span><br><span class="line"><span class="keyword">if</span>(y!=c) q+=y;</span><br><span class="line">&#125;</span><br><span class="line">p+=q;</span><br><span class="line">start=q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p!=s) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;s.<span class="built_in">substr</span>(<span class="number">0</span>,len)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ord&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line"><span class="keyword">while</span>(tt--)&#123;</span><br><span class="line"><span class="built_in">slv</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F2-hard-version"><a href="#F2-hard-version" class="headerlink" title="F2(hard version)"></a>F2(hard version)</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h3><p>题意非常简单，就是给定一个x，寻找&gt;=x的最小的k漂亮数</p><blockquote><p>k漂亮数：一个数中出现的数字个数小于等于k的数字被称为k漂亮数</p></blockquote><p>$$<br>1&lt;=x&lt;=1e9<br>$$</p><p>$$<br>1&lt;=k&lt;=10<br>$$</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2021 3</span><br><span class="line">177890 2</span><br><span class="line">34512 3</span><br><span class="line">724533 4</span><br><span class="line">998244353 1</span><br><span class="line">12345678 10</span><br><span class="line"></span><br><span class="line">2021</span><br><span class="line">181111</span><br><span class="line">34533</span><br><span class="line">724542</span><br><span class="line">999999999</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure></blockquote><h3 id="算法思路-5"><a href="#算法思路-5" class="headerlink" title="算法思路"></a>算法思路</h3><p>这个题比较难，参考官网给的思路，从高到低用set维护出现过的数字，如果此时出现的数字大于k，将此位++，并将后面的元素全部清’0’，如此反复操作，直到符合要求为止</p><h3 id="参考代码-5"><a href="#参考代码-5" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">slv</span><span class="params">()</span></span>&#123;</span><br><span class="line">string n;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">set&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">s.<span class="built_in">insert</span>(n[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;=k) <span class="keyword">return</span> n;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">s.<span class="built_in">insert</span>(n[j]);</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">size</span>()&gt;k)&#123;</span><br><span class="line"><span class="keyword">while</span>(n[j]==<span class="string">&#x27;9&#x27;</span>) j--;</span><br><span class="line">n[j]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=j+<span class="number">1</span>;i&lt;n.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">n[i]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> tt;cin&gt;&gt;tt;</span><br><span class="line"><span class="keyword">while</span>(tt--)&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">slv</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java接口学习</title>
      <link href="/2021/12/24/java%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/24/java%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div class="justified-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg"></p>          </div><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>调用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口中的属性默认静态，常量</li><li>方法均为抽象方法，没有方法体</li><li>静态方法可以有方法体，直接由接口名调用</li><li>接口中还有default方法，所有实现了接口的类都继承这个方法</li></ul><h1 id="Static-Final"><a href="#Static-Final" class="headerlink" title="Static Final"></a>Static Final</h1><ul><li><p>static : 静态的  唯一 </p><ul><li>属性 不属于对象，可以由类名直接调用 且只有一份</li><li>方法 不属于对象，可以由类名直接调用 且只有一份</li><li>类 ： 内部类 </li><li>代码块：类使用时执行 </li></ul></li><li><p>final : 最终的  不可变 </p><ul><li>属性 ：必须初始化值 之后对象调用final 修饰的常量 不能修改值 </li><li>方法 ：方法不能被重写 </li><li>类: 不能被继承  String </li></ul></li></ul><ul><li>重写的方法： 子类以及子类对象优先调用 </li><li>接口的使用方法： <ul><li>创建一个类实现implements 接口</li><li>必须重写接口中所有的抽象方法</li></ul></li><li>类： 抽象的 </li><li>类相对于对象抽象： 属性抽象  方法还是具体的&gt;类是不完全抽象的 </li><li>接口：属性是具体的，方法抽象（抽象行为） </li><li>类+接口： 实现对一类事物/一类行为进行抽象处理 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code.treetest1212;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configLock</span><span class="params">(Lock lock)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock=lock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockOpen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.open();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FaceLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人脸开门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人脸关门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManageDoor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        String S=<span class="keyword">new</span> String();</span><br><span class="line">        <span class="keyword">double</span> d;</span><br><span class="line">        <span class="keyword">float</span> f;</span><br><span class="line">        <span class="keyword">byte</span> B;</span><br><span class="line">        <span class="keyword">int</span> [] A= <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">8</span>];</span><br><span class="line">        ArrayList&lt;Integer&gt; ls=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Door door = <span class="keyword">new</span> Door();</span><br><span class="line">        door.configLock(<span class="keyword">new</span> FaceLock());</span><br><span class="line">        door.configLock(<span class="keyword">new</span> KeyLock());</span><br><span class="line">        door.lockOpen();</span><br><span class="line">        door.lockClose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么java中要有接口的存在？？</p><p>大概是为了软件设计人员更好的进行顶层的设计，不必深究其中的细节，这样子能更好的全局把握软件的开发!</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java继承学习</title>
      <link href="/2021/12/24/java%E7%BB%A7%E6%89%BF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/24/java%E7%BB%A7%E6%89%BF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>一般有类和类的继承，接口和接口的继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">通用写法，关键字extends</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(id+name+score+pid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意子类继承了父类的所有东西，但是子类以及子类对象能够调用的到的继承内容和访问修饰符有关</p><ul><li><p>访问修饰符</p><ul><li>public 整个项目都可以访问</li><li>private 本类的{}(代码块)中</li><li>protected 同包下，以及不同包的子类中</li><li>缺省 同包下</li></ul></li><li><p>方法重写</p><ul><li>子类重写父类的方法，子类以及子类对象优先调用</li><li>一般要求子类中的方法和父类方法的结构体一样：方法体可以改变</li></ul></li><li><p>访问权限修饰符可以在子类中从小放大，比如父类中的public方法可以在子类中重写为private方法</p></li><li><p>可以在父类方法中返回子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="function">B <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>强制转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=(<span class="keyword">int</span>)(<span class="number">1.2</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = (B)a;</span><br></pre></td></tr></table></figure><p>注意强制转型是不安全的</p></li><li><p>自动转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b=<span class="number">100</span>; <span class="keyword">int</span> i=b;</span><br><span class="line">A a = <span class="keyword">new</span> B() #前提是B是A的子类</span><br></pre></td></tr></table></figure><p>自动转型是安全的</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队项目部署到服务器上</title>
      <link href="/2021/12/23/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2021/12/23/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="后端工程"><a href="#后端工程" class="headerlink" title="后端工程"></a>后端工程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar 你的jar包名称 --spring.profiles.prod=active &amp;</span><br><span class="line">指定在后台执行并且优先执行prod中的配置文件</span><br></pre></td></tr></table></figure><h2 id="前端工程"><a href="#前端工程" class="headerlink" title="前端工程"></a>前端工程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload #每次部署都需要重启nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
